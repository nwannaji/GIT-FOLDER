//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EBHIS {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EBHISDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EBHISDataSet : global::System.Data.DataSet {
        
        private PATIENT_DATATABLEDataTable tablePATIENT_DATATABLE;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EBHISDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected EBHISDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["PATIENT_DATATABLE"] != null)) {
                    base.Tables.Add(new PATIENT_DATATABLEDataTable(ds.Tables["PATIENT_DATATABLE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PATIENT_DATATABLEDataTable PATIENT_DATATABLE {
            get {
                return this.tablePATIENT_DATATABLE;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            EBHISDataSet cln = ((EBHISDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["PATIENT_DATATABLE"] != null)) {
                    base.Tables.Add(new PATIENT_DATATABLEDataTable(ds.Tables["PATIENT_DATATABLE"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tablePATIENT_DATATABLE = ((PATIENT_DATATABLEDataTable)(base.Tables["PATIENT_DATATABLE"]));
            if ((initTable == true)) {
                if ((this.tablePATIENT_DATATABLE != null)) {
                    this.tablePATIENT_DATATABLE.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "EBHISDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EBHISDataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablePATIENT_DATATABLE = new PATIENT_DATATABLEDataTable();
            base.Tables.Add(this.tablePATIENT_DATATABLE);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializePATIENT_DATATABLE() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EBHISDataSet ds = new EBHISDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void PATIENT_DATATABLERowChangeEventHandler(object sender, PATIENT_DATATABLERowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PATIENT_DATATABLEDataTable : global::System.Data.TypedTableBase<PATIENT_DATATABLERow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnFOLDERID;
            
            private global::System.Data.DataColumn columnFIRSTNAME;
            
            private global::System.Data.DataColumn columnMIDDLENAME;
            
            private global::System.Data.DataColumn columnSURNAME;
            
            private global::System.Data.DataColumn columnSEX;
            
            private global::System.Data.DataColumn columnBLOODGROUP;
            
            private global::System.Data.DataColumn columnGENOTYPE;
            
            private global::System.Data.DataColumn columnADDRESS;
            
            private global::System.Data.DataColumn columnPHONENUMBER;
            
            private global::System.Data.DataColumn columnLOCALGOVT;
            
            private global::System.Data.DataColumn columnPATIENTNEXTOFKIN;
            
            private global::System.Data.DataColumn columnNEXTOFKINADDRESS;
            
            private global::System.Data.DataColumn columnNEXTOFKINPHONENUMBER;
            
            private global::System.Data.DataColumn columnPATIENTPHOTO;
            
            private global::System.Data.DataColumn columnPATIENTFINGERPRINT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PATIENT_DATATABLEDataTable() {
                this.TableName = "PATIENT_DATATABLE";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PATIENT_DATATABLEDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected PATIENT_DATATABLEDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FOLDERIDColumn {
                get {
                    return this.columnFOLDERID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FIRSTNAMEColumn {
                get {
                    return this.columnFIRSTNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MIDDLENAMEColumn {
                get {
                    return this.columnMIDDLENAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SURNAMEColumn {
                get {
                    return this.columnSURNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SEXColumn {
                get {
                    return this.columnSEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BLOODGROUPColumn {
                get {
                    return this.columnBLOODGROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GENOTYPEColumn {
                get {
                    return this.columnGENOTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ADDRESSColumn {
                get {
                    return this.columnADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PHONENUMBERColumn {
                get {
                    return this.columnPHONENUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LOCALGOVTColumn {
                get {
                    return this.columnLOCALGOVT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PATIENTNEXTOFKINColumn {
                get {
                    return this.columnPATIENTNEXTOFKIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NEXTOFKINADDRESSColumn {
                get {
                    return this.columnNEXTOFKINADDRESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NEXTOFKINPHONENUMBERColumn {
                get {
                    return this.columnNEXTOFKINPHONENUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PATIENTPHOTOColumn {
                get {
                    return this.columnPATIENTPHOTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PATIENTFINGERPRINTColumn {
                get {
                    return this.columnPATIENTFINGERPRINT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PATIENT_DATATABLERow this[int index] {
                get {
                    return ((PATIENT_DATATABLERow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PATIENT_DATATABLERowChangeEventHandler PATIENT_DATATABLERowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PATIENT_DATATABLERowChangeEventHandler PATIENT_DATATABLERowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PATIENT_DATATABLERowChangeEventHandler PATIENT_DATATABLERowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event PATIENT_DATATABLERowChangeEventHandler PATIENT_DATATABLERowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddPATIENT_DATATABLERow(PATIENT_DATATABLERow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PATIENT_DATATABLERow AddPATIENT_DATATABLERow(int FOLDERID, string FIRSTNAME, string MIDDLENAME, string SURNAME, string SEX, string BLOODGROUP, string GENOTYPE, string ADDRESS, long PHONENUMBER, string LOCALGOVT, string PATIENTNEXTOFKIN, string NEXTOFKINADDRESS, long NEXTOFKINPHONENUMBER, byte[] PATIENTPHOTO, byte[] PATIENTFINGERPRINT) {
                PATIENT_DATATABLERow rowPATIENT_DATATABLERow = ((PATIENT_DATATABLERow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FOLDERID,
                        FIRSTNAME,
                        MIDDLENAME,
                        SURNAME,
                        SEX,
                        BLOODGROUP,
                        GENOTYPE,
                        ADDRESS,
                        PHONENUMBER,
                        LOCALGOVT,
                        PATIENTNEXTOFKIN,
                        NEXTOFKINADDRESS,
                        NEXTOFKINPHONENUMBER,
                        PATIENTPHOTO,
                        PATIENTFINGERPRINT};
                rowPATIENT_DATATABLERow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPATIENT_DATATABLERow);
                return rowPATIENT_DATATABLERow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PATIENT_DATATABLERow FindByID(int ID) {
                return ((PATIENT_DATATABLERow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                PATIENT_DATATABLEDataTable cln = ((PATIENT_DATATABLEDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PATIENT_DATATABLEDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnFOLDERID = base.Columns["FOLDERID"];
                this.columnFIRSTNAME = base.Columns["FIRSTNAME"];
                this.columnMIDDLENAME = base.Columns["MIDDLENAME"];
                this.columnSURNAME = base.Columns["SURNAME"];
                this.columnSEX = base.Columns["SEX"];
                this.columnBLOODGROUP = base.Columns["BLOODGROUP"];
                this.columnGENOTYPE = base.Columns["GENOTYPE"];
                this.columnADDRESS = base.Columns["ADDRESS"];
                this.columnPHONENUMBER = base.Columns["PHONENUMBER"];
                this.columnLOCALGOVT = base.Columns["LOCALGOVT"];
                this.columnPATIENTNEXTOFKIN = base.Columns["PATIENTNEXTOFKIN"];
                this.columnNEXTOFKINADDRESS = base.Columns["NEXTOFKINADDRESS"];
                this.columnNEXTOFKINPHONENUMBER = base.Columns["NEXTOFKINPHONENUMBER"];
                this.columnPATIENTPHOTO = base.Columns["PATIENTPHOTO"];
                this.columnPATIENTFINGERPRINT = base.Columns["PATIENTFINGERPRINT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnFOLDERID = new global::System.Data.DataColumn("FOLDERID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFOLDERID);
                this.columnFIRSTNAME = new global::System.Data.DataColumn("FIRSTNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIRSTNAME);
                this.columnMIDDLENAME = new global::System.Data.DataColumn("MIDDLENAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMIDDLENAME);
                this.columnSURNAME = new global::System.Data.DataColumn("SURNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSURNAME);
                this.columnSEX = new global::System.Data.DataColumn("SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSEX);
                this.columnBLOODGROUP = new global::System.Data.DataColumn("BLOODGROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLOODGROUP);
                this.columnGENOTYPE = new global::System.Data.DataColumn("GENOTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGENOTYPE);
                this.columnADDRESS = new global::System.Data.DataColumn("ADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADDRESS);
                this.columnPHONENUMBER = new global::System.Data.DataColumn("PHONENUMBER", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPHONENUMBER);
                this.columnLOCALGOVT = new global::System.Data.DataColumn("LOCALGOVT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCALGOVT);
                this.columnPATIENTNEXTOFKIN = new global::System.Data.DataColumn("PATIENTNEXTOFKIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENTNEXTOFKIN);
                this.columnNEXTOFKINADDRESS = new global::System.Data.DataColumn("NEXTOFKINADDRESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNEXTOFKINADDRESS);
                this.columnNEXTOFKINPHONENUMBER = new global::System.Data.DataColumn("NEXTOFKINPHONENUMBER", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNEXTOFKINPHONENUMBER);
                this.columnPATIENTPHOTO = new global::System.Data.DataColumn("PATIENTPHOTO", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENTPHOTO);
                this.columnPATIENTFINGERPRINT = new global::System.Data.DataColumn("PATIENTFINGERPRINT", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENTFINGERPRINT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AutoIncrement = true;
                this.columnID.AutoIncrementSeed = -1;
                this.columnID.AutoIncrementStep = -1;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
                this.columnFOLDERID.AllowDBNull = false;
                this.columnFIRSTNAME.AllowDBNull = false;
                this.columnFIRSTNAME.MaxLength = 25;
                this.columnMIDDLENAME.MaxLength = 25;
                this.columnSURNAME.AllowDBNull = false;
                this.columnSURNAME.MaxLength = 25;
                this.columnSEX.AllowDBNull = false;
                this.columnSEX.MaxLength = 10;
                this.columnBLOODGROUP.AllowDBNull = false;
                this.columnBLOODGROUP.MaxLength = 10;
                this.columnGENOTYPE.AllowDBNull = false;
                this.columnGENOTYPE.MaxLength = 10;
                this.columnADDRESS.AllowDBNull = false;
                this.columnADDRESS.MaxLength = 100;
                this.columnPHONENUMBER.AllowDBNull = false;
                this.columnLOCALGOVT.AllowDBNull = false;
                this.columnLOCALGOVT.MaxLength = 100;
                this.columnPATIENTNEXTOFKIN.AllowDBNull = false;
                this.columnPATIENTNEXTOFKIN.MaxLength = 100;
                this.columnNEXTOFKINADDRESS.AllowDBNull = false;
                this.columnNEXTOFKINADDRESS.MaxLength = 100;
                this.columnNEXTOFKINPHONENUMBER.AllowDBNull = false;
                this.columnPATIENTPHOTO.AllowDBNull = false;
                this.columnPATIENTFINGERPRINT.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PATIENT_DATATABLERow NewPATIENT_DATATABLERow() {
                return ((PATIENT_DATATABLERow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PATIENT_DATATABLERow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(PATIENT_DATATABLERow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PATIENT_DATATABLERowChanged != null)) {
                    this.PATIENT_DATATABLERowChanged(this, new PATIENT_DATATABLERowChangeEvent(((PATIENT_DATATABLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PATIENT_DATATABLERowChanging != null)) {
                    this.PATIENT_DATATABLERowChanging(this, new PATIENT_DATATABLERowChangeEvent(((PATIENT_DATATABLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PATIENT_DATATABLERowDeleted != null)) {
                    this.PATIENT_DATATABLERowDeleted(this, new PATIENT_DATATABLERowChangeEvent(((PATIENT_DATATABLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PATIENT_DATATABLERowDeleting != null)) {
                    this.PATIENT_DATATABLERowDeleting(this, new PATIENT_DATATABLERowChangeEvent(((PATIENT_DATATABLERow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemovePATIENT_DATATABLERow(PATIENT_DATATABLERow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EBHISDataSet ds = new EBHISDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PATIENT_DATATABLEDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class PATIENT_DATATABLERow : global::System.Data.DataRow {
            
            private PATIENT_DATATABLEDataTable tablePATIENT_DATATABLE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal PATIENT_DATATABLERow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePATIENT_DATATABLE = ((PATIENT_DATATABLEDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID {
                get {
                    return ((int)(this[this.tablePATIENT_DATATABLE.IDColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int FOLDERID {
                get {
                    return ((int)(this[this.tablePATIENT_DATATABLE.FOLDERIDColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.FOLDERIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string FIRSTNAME {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.FIRSTNAMEColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.FIRSTNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MIDDLENAME {
                get {
                    try {
                        return ((string)(this[this.tablePATIENT_DATATABLE.MIDDLENAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MIDDLENAME\' in table \'PATIENT_DATATABLE\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePATIENT_DATATABLE.MIDDLENAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SURNAME {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.SURNAMEColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.SURNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SEX {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.SEXColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BLOODGROUP {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.BLOODGROUPColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.BLOODGROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GENOTYPE {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.GENOTYPEColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.GENOTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ADDRESS {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.ADDRESSColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.ADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long PHONENUMBER {
                get {
                    return ((long)(this[this.tablePATIENT_DATATABLE.PHONENUMBERColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.PHONENUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string LOCALGOVT {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.LOCALGOVTColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.LOCALGOVTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PATIENTNEXTOFKIN {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.PATIENTNEXTOFKINColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.PATIENTNEXTOFKINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string NEXTOFKINADDRESS {
                get {
                    return ((string)(this[this.tablePATIENT_DATATABLE.NEXTOFKINADDRESSColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.NEXTOFKINADDRESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long NEXTOFKINPHONENUMBER {
                get {
                    return ((long)(this[this.tablePATIENT_DATATABLE.NEXTOFKINPHONENUMBERColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.NEXTOFKINPHONENUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] PATIENTPHOTO {
                get {
                    return ((byte[])(this[this.tablePATIENT_DATATABLE.PATIENTPHOTOColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.PATIENTPHOTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public byte[] PATIENTFINGERPRINT {
                get {
                    return ((byte[])(this[this.tablePATIENT_DATATABLE.PATIENTFINGERPRINTColumn]));
                }
                set {
                    this[this.tablePATIENT_DATATABLE.PATIENTFINGERPRINTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMIDDLENAMENull() {
                return this.IsNull(this.tablePATIENT_DATATABLE.MIDDLENAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMIDDLENAMENull() {
                this[this.tablePATIENT_DATATABLE.MIDDLENAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class PATIENT_DATATABLERowChangeEvent : global::System.EventArgs {
            
            private PATIENT_DATATABLERow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PATIENT_DATATABLERowChangeEvent(PATIENT_DATATABLERow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public PATIENT_DATATABLERow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace EBHIS.EBHISDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PATIENT_DATATABLETableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public PATIENT_DATATABLETableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PATIENT_DATATABLE";
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("FOLDERID", "FOLDERID");
            tableMapping.ColumnMappings.Add("FIRSTNAME", "FIRSTNAME");
            tableMapping.ColumnMappings.Add("MIDDLENAME", "MIDDLENAME");
            tableMapping.ColumnMappings.Add("SURNAME", "SURNAME");
            tableMapping.ColumnMappings.Add("SEX", "SEX");
            tableMapping.ColumnMappings.Add("BLOODGROUP", "BLOODGROUP");
            tableMapping.ColumnMappings.Add("GENOTYPE", "GENOTYPE");
            tableMapping.ColumnMappings.Add("ADDRESS", "ADDRESS");
            tableMapping.ColumnMappings.Add("PHONENUMBER", "PHONENUMBER");
            tableMapping.ColumnMappings.Add("LOCALGOVT", "LOCALGOVT");
            tableMapping.ColumnMappings.Add("PATIENTNEXTOFKIN", "PATIENTNEXTOFKIN");
            tableMapping.ColumnMappings.Add("NEXTOFKINADDRESS", "NEXTOFKINADDRESS");
            tableMapping.ColumnMappings.Add("NEXTOFKINPHONENUMBER", "NEXTOFKINPHONENUMBER");
            tableMapping.ColumnMappings.Add("PATIENTPHOTO", "PATIENTPHOTO");
            tableMapping.ColumnMappings.Add("PATIENTFINGERPRINT", "PATIENTFINGERPRINT");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[PATIENT_DATATABLE] WHERE (([ID] = @Original_ID) AND ([FOLDERID] = @Original_FOLDERID) AND ([FIRSTNAME] = @Original_FIRSTNAME) AND ((@IsNull_MIDDLENAME = 1 AND [MIDDLENAME] IS NULL) OR ([MIDDLENAME] = @Original_MIDDLENAME)) AND ([SURNAME] = @Original_SURNAME) AND ([SEX] = @Original_SEX) AND ([BLOODGROUP] = @Original_BLOODGROUP) AND ([GENOTYPE] = @Original_GENOTYPE) AND ([ADDRESS] = @Original_ADDRESS) AND ([PHONENUMBER] = @Original_PHONENUMBER) AND ([LOCALGOVT] = @Original_LOCALGOVT) AND ([PATIENTNEXTOFKIN] = @Original_PATIENTNEXTOFKIN) AND ([NEXTOFKINADDRESS] = @Original_NEXTOFKINADDRESS) AND ([NEXTOFKINPHONENUMBER] = @Original_NEXTOFKINPHONENUMBER))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FOLDERID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FOLDERID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FIRSTNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FIRSTNAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MIDDLENAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIDDLENAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MIDDLENAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIDDLENAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SURNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SURNAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SEX", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SEX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BLOODGROUP", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOODGROUP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GENOTYPE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENOTYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONENUMBER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LOCALGOVT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOCALGOVT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENTNEXTOFKIN", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTNEXTOFKIN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NEXTOFKINADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NEXTOFKINPHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINPHONENUMBER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[PATIENT_DATATABLE] ([FOLDERID], [FIRSTNAME], [MIDDLENAME], [SURNAME], [SEX], [BLOODGROUP], [GENOTYPE], [ADDRESS], [PHONENUMBER], [LOCALGOVT], [PATIENTNEXTOFKIN], [NEXTOFKINADDRESS], [NEXTOFKINPHONENUMBER], [PATIENTPHOTO], [PATIENTFINGERPRINT]) VALUES (@FOLDERID, @FIRSTNAME, @MIDDLENAME, @SURNAME, @SEX, @BLOODGROUP, @GENOTYPE, @ADDRESS, @PHONENUMBER, @LOCALGOVT, @PATIENTNEXTOFKIN, @NEXTOFKINADDRESS, @NEXTOFKINPHONENUMBER, @PATIENTPHOTO, @PATIENTFINGERPRINT);
SELECT ID, FOLDERID, FIRSTNAME, MIDDLENAME, SURNAME, SEX, BLOODGROUP, GENOTYPE, ADDRESS, PHONENUMBER, LOCALGOVT, PATIENTNEXTOFKIN, NEXTOFKINADDRESS, NEXTOFKINPHONENUMBER, PATIENTPHOTO, PATIENTFINGERPRINT FROM PATIENT_DATATABLE WHERE (ID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FOLDERID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FOLDERID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FIRSTNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FIRSTNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MIDDLENAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIDDLENAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SURNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SURNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SEX", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLOODGROUP", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOODGROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENOTYPE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENOTYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONENUMBER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOCALGOVT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOCALGOVT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENTNEXTOFKIN", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTNEXTOFKIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NEXTOFKINADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NEXTOFKINPHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINPHONENUMBER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENTPHOTO", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTPHOTO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENTFINGERPRINT", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTFINGERPRINT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[PATIENT_DATATABLE] SET [FOLDERID] = @FOLDERID, [FIRSTNAME] = @FIRSTNAME, [MIDDLENAME] = @MIDDLENAME, [SURNAME] = @SURNAME, [SEX] = @SEX, [BLOODGROUP] = @BLOODGROUP, [GENOTYPE] = @GENOTYPE, [ADDRESS] = @ADDRESS, [PHONENUMBER] = @PHONENUMBER, [LOCALGOVT] = @LOCALGOVT, [PATIENTNEXTOFKIN] = @PATIENTNEXTOFKIN, [NEXTOFKINADDRESS] = @NEXTOFKINADDRESS, [NEXTOFKINPHONENUMBER] = @NEXTOFKINPHONENUMBER, [PATIENTPHOTO] = @PATIENTPHOTO, [PATIENTFINGERPRINT] = @PATIENTFINGERPRINT WHERE (([ID] = @Original_ID) AND ([FOLDERID] = @Original_FOLDERID) AND ([FIRSTNAME] = @Original_FIRSTNAME) AND ((@IsNull_MIDDLENAME = 1 AND [MIDDLENAME] IS NULL) OR ([MIDDLENAME] = @Original_MIDDLENAME)) AND ([SURNAME] = @Original_SURNAME) AND ([SEX] = @Original_SEX) AND ([BLOODGROUP] = @Original_BLOODGROUP) AND ([GENOTYPE] = @Original_GENOTYPE) AND ([ADDRESS] = @Original_ADDRESS) AND ([PHONENUMBER] = @Original_PHONENUMBER) AND ([LOCALGOVT] = @Original_LOCALGOVT) AND ([PATIENTNEXTOFKIN] = @Original_PATIENTNEXTOFKIN) AND ([NEXTOFKINADDRESS] = @Original_NEXTOFKINADDRESS) AND ([NEXTOFKINPHONENUMBER] = @Original_NEXTOFKINPHONENUMBER));
SELECT ID, FOLDERID, FIRSTNAME, MIDDLENAME, SURNAME, SEX, BLOODGROUP, GENOTYPE, ADDRESS, PHONENUMBER, LOCALGOVT, PATIENTNEXTOFKIN, NEXTOFKINADDRESS, NEXTOFKINPHONENUMBER, PATIENTPHOTO, PATIENTFINGERPRINT FROM PATIENT_DATATABLE WHERE (ID = @ID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FOLDERID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FOLDERID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FIRSTNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FIRSTNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MIDDLENAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIDDLENAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SURNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SURNAME", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SEX", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SEX", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BLOODGROUP", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOODGROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@GENOTYPE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENOTYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONENUMBER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LOCALGOVT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOCALGOVT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENTNEXTOFKIN", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTNEXTOFKIN", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NEXTOFKINADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINADDRESS", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NEXTOFKINPHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINPHONENUMBER", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENTPHOTO", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTPHOTO", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PATIENTFINGERPRINT", global::System.Data.SqlDbType.Image, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTFINGERPRINT", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FOLDERID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FOLDERID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FIRSTNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FIRSTNAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_MIDDLENAME", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIDDLENAME", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MIDDLENAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MIDDLENAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SURNAME", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SURNAME", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SEX", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SEX", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BLOODGROUP", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BLOODGROUP", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_GENOTYPE", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "GENOTYPE", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PHONENUMBER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LOCALGOVT", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LOCALGOVT", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PATIENTNEXTOFKIN", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PATIENTNEXTOFKIN", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NEXTOFKINADDRESS", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINADDRESS", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NEXTOFKINPHONENUMBER", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NEXTOFKINPHONENUMBER", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::EBHIS.Properties.Settings.Default.EBHISConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID, FOLDERID, FIRSTNAME, MIDDLENAME, SURNAME, SEX, BLOODGROUP, GENOTYPE, A" +
                "DDRESS, PHONENUMBER, LOCALGOVT, PATIENTNEXTOFKIN, NEXTOFKINADDRESS, NEXTOFKINPHO" +
                "NENUMBER, PATIENTPHOTO, PATIENTFINGERPRINT FROM dbo.PATIENT_DATATABLE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EBHISDataSet.PATIENT_DATATABLEDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EBHISDataSet.PATIENT_DATATABLEDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EBHISDataSet.PATIENT_DATATABLEDataTable dataTable = new EBHISDataSet.PATIENT_DATATABLEDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EBHISDataSet.PATIENT_DATATABLEDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EBHISDataSet dataSet) {
            return this.Adapter.Update(dataSet, "PATIENT_DATATABLE");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID, int Original_FOLDERID, string Original_FIRSTNAME, string Original_MIDDLENAME, string Original_SURNAME, string Original_SEX, string Original_BLOODGROUP, string Original_GENOTYPE, string Original_ADDRESS, long Original_PHONENUMBER, string Original_LOCALGOVT, string Original_PATIENTNEXTOFKIN, string Original_NEXTOFKINADDRESS, long Original_NEXTOFKINPHONENUMBER) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_FOLDERID));
            if ((Original_FIRSTNAME == null)) {
                throw new global::System.ArgumentNullException("Original_FIRSTNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_FIRSTNAME));
            }
            if ((Original_MIDDLENAME == null)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_MIDDLENAME));
            }
            if ((Original_SURNAME == null)) {
                throw new global::System.ArgumentNullException("Original_SURNAME");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_SURNAME));
            }
            if ((Original_SEX == null)) {
                throw new global::System.ArgumentNullException("Original_SEX");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_SEX));
            }
            if ((Original_BLOODGROUP == null)) {
                throw new global::System.ArgumentNullException("Original_BLOODGROUP");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_BLOODGROUP));
            }
            if ((Original_GENOTYPE == null)) {
                throw new global::System.ArgumentNullException("Original_GENOTYPE");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_GENOTYPE));
            }
            if ((Original_ADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_ADDRESS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_ADDRESS));
            }
            this.Adapter.DeleteCommand.Parameters[10].Value = ((long)(Original_PHONENUMBER));
            if ((Original_LOCALGOVT == null)) {
                throw new global::System.ArgumentNullException("Original_LOCALGOVT");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_LOCALGOVT));
            }
            if ((Original_PATIENTNEXTOFKIN == null)) {
                throw new global::System.ArgumentNullException("Original_PATIENTNEXTOFKIN");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_PATIENTNEXTOFKIN));
            }
            if ((Original_NEXTOFKINADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_NEXTOFKINADDRESS");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_NEXTOFKINADDRESS));
            }
            this.Adapter.DeleteCommand.Parameters[14].Value = ((long)(Original_NEXTOFKINPHONENUMBER));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int FOLDERID, string FIRSTNAME, string MIDDLENAME, string SURNAME, string SEX, string BLOODGROUP, string GENOTYPE, string ADDRESS, long PHONENUMBER, string LOCALGOVT, string PATIENTNEXTOFKIN, string NEXTOFKINADDRESS, long NEXTOFKINPHONENUMBER, byte[] PATIENTPHOTO, byte[] PATIENTFINGERPRINT) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FOLDERID));
            if ((FIRSTNAME == null)) {
                throw new global::System.ArgumentNullException("FIRSTNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FIRSTNAME));
            }
            if ((MIDDLENAME == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MIDDLENAME));
            }
            if ((SURNAME == null)) {
                throw new global::System.ArgumentNullException("SURNAME");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SURNAME));
            }
            if ((SEX == null)) {
                throw new global::System.ArgumentNullException("SEX");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(SEX));
            }
            if ((BLOODGROUP == null)) {
                throw new global::System.ArgumentNullException("BLOODGROUP");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(BLOODGROUP));
            }
            if ((GENOTYPE == null)) {
                throw new global::System.ArgumentNullException("GENOTYPE");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(GENOTYPE));
            }
            if ((ADDRESS == null)) {
                throw new global::System.ArgumentNullException("ADDRESS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(ADDRESS));
            }
            this.Adapter.InsertCommand.Parameters[8].Value = ((long)(PHONENUMBER));
            if ((LOCALGOVT == null)) {
                throw new global::System.ArgumentNullException("LOCALGOVT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(LOCALGOVT));
            }
            if ((PATIENTNEXTOFKIN == null)) {
                throw new global::System.ArgumentNullException("PATIENTNEXTOFKIN");
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(PATIENTNEXTOFKIN));
            }
            if ((NEXTOFKINADDRESS == null)) {
                throw new global::System.ArgumentNullException("NEXTOFKINADDRESS");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(NEXTOFKINADDRESS));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((long)(NEXTOFKINPHONENUMBER));
            if ((PATIENTPHOTO == null)) {
                throw new global::System.ArgumentNullException("PATIENTPHOTO");
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = ((byte[])(PATIENTPHOTO));
            }
            if ((PATIENTFINGERPRINT == null)) {
                throw new global::System.ArgumentNullException("PATIENTFINGERPRINT");
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((byte[])(PATIENTFINGERPRINT));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FOLDERID, 
                    string FIRSTNAME, 
                    string MIDDLENAME, 
                    string SURNAME, 
                    string SEX, 
                    string BLOODGROUP, 
                    string GENOTYPE, 
                    string ADDRESS, 
                    long PHONENUMBER, 
                    string LOCALGOVT, 
                    string PATIENTNEXTOFKIN, 
                    string NEXTOFKINADDRESS, 
                    long NEXTOFKINPHONENUMBER, 
                    byte[] PATIENTPHOTO, 
                    byte[] PATIENTFINGERPRINT, 
                    int Original_ID, 
                    int Original_FOLDERID, 
                    string Original_FIRSTNAME, 
                    string Original_MIDDLENAME, 
                    string Original_SURNAME, 
                    string Original_SEX, 
                    string Original_BLOODGROUP, 
                    string Original_GENOTYPE, 
                    string Original_ADDRESS, 
                    long Original_PHONENUMBER, 
                    string Original_LOCALGOVT, 
                    string Original_PATIENTNEXTOFKIN, 
                    string Original_NEXTOFKINADDRESS, 
                    long Original_NEXTOFKINPHONENUMBER, 
                    int ID) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FOLDERID));
            if ((FIRSTNAME == null)) {
                throw new global::System.ArgumentNullException("FIRSTNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FIRSTNAME));
            }
            if ((MIDDLENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(MIDDLENAME));
            }
            if ((SURNAME == null)) {
                throw new global::System.ArgumentNullException("SURNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SURNAME));
            }
            if ((SEX == null)) {
                throw new global::System.ArgumentNullException("SEX");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(SEX));
            }
            if ((BLOODGROUP == null)) {
                throw new global::System.ArgumentNullException("BLOODGROUP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(BLOODGROUP));
            }
            if ((GENOTYPE == null)) {
                throw new global::System.ArgumentNullException("GENOTYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(GENOTYPE));
            }
            if ((ADDRESS == null)) {
                throw new global::System.ArgumentNullException("ADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(ADDRESS));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((long)(PHONENUMBER));
            if ((LOCALGOVT == null)) {
                throw new global::System.ArgumentNullException("LOCALGOVT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(LOCALGOVT));
            }
            if ((PATIENTNEXTOFKIN == null)) {
                throw new global::System.ArgumentNullException("PATIENTNEXTOFKIN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(PATIENTNEXTOFKIN));
            }
            if ((NEXTOFKINADDRESS == null)) {
                throw new global::System.ArgumentNullException("NEXTOFKINADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(NEXTOFKINADDRESS));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((long)(NEXTOFKINPHONENUMBER));
            if ((PATIENTPHOTO == null)) {
                throw new global::System.ArgumentNullException("PATIENTPHOTO");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((byte[])(PATIENTPHOTO));
            }
            if ((PATIENTFINGERPRINT == null)) {
                throw new global::System.ArgumentNullException("PATIENTFINGERPRINT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((byte[])(PATIENTFINGERPRINT));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_ID));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(Original_FOLDERID));
            if ((Original_FIRSTNAME == null)) {
                throw new global::System.ArgumentNullException("Original_FIRSTNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_FIRSTNAME));
            }
            if ((Original_MIDDLENAME == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(Original_MIDDLENAME));
            }
            if ((Original_SURNAME == null)) {
                throw new global::System.ArgumentNullException("Original_SURNAME");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_SURNAME));
            }
            if ((Original_SEX == null)) {
                throw new global::System.ArgumentNullException("Original_SEX");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_SEX));
            }
            if ((Original_BLOODGROUP == null)) {
                throw new global::System.ArgumentNullException("Original_BLOODGROUP");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Original_BLOODGROUP));
            }
            if ((Original_GENOTYPE == null)) {
                throw new global::System.ArgumentNullException("Original_GENOTYPE");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_GENOTYPE));
            }
            if ((Original_ADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_ADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_ADDRESS));
            }
            this.Adapter.UpdateCommand.Parameters[25].Value = ((long)(Original_PHONENUMBER));
            if ((Original_LOCALGOVT == null)) {
                throw new global::System.ArgumentNullException("Original_LOCALGOVT");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_LOCALGOVT));
            }
            if ((Original_PATIENTNEXTOFKIN == null)) {
                throw new global::System.ArgumentNullException("Original_PATIENTNEXTOFKIN");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_PATIENTNEXTOFKIN));
            }
            if ((Original_NEXTOFKINADDRESS == null)) {
                throw new global::System.ArgumentNullException("Original_NEXTOFKINADDRESS");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_NEXTOFKINADDRESS));
            }
            this.Adapter.UpdateCommand.Parameters[29].Value = ((long)(Original_NEXTOFKINPHONENUMBER));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FOLDERID, 
                    string FIRSTNAME, 
                    string MIDDLENAME, 
                    string SURNAME, 
                    string SEX, 
                    string BLOODGROUP, 
                    string GENOTYPE, 
                    string ADDRESS, 
                    long PHONENUMBER, 
                    string LOCALGOVT, 
                    string PATIENTNEXTOFKIN, 
                    string NEXTOFKINADDRESS, 
                    long NEXTOFKINPHONENUMBER, 
                    byte[] PATIENTPHOTO, 
                    byte[] PATIENTFINGERPRINT, 
                    int Original_ID, 
                    int Original_FOLDERID, 
                    string Original_FIRSTNAME, 
                    string Original_MIDDLENAME, 
                    string Original_SURNAME, 
                    string Original_SEX, 
                    string Original_BLOODGROUP, 
                    string Original_GENOTYPE, 
                    string Original_ADDRESS, 
                    long Original_PHONENUMBER, 
                    string Original_LOCALGOVT, 
                    string Original_PATIENTNEXTOFKIN, 
                    string Original_NEXTOFKINADDRESS, 
                    long Original_NEXTOFKINPHONENUMBER) {
            return this.Update(FOLDERID, FIRSTNAME, MIDDLENAME, SURNAME, SEX, BLOODGROUP, GENOTYPE, ADDRESS, PHONENUMBER, LOCALGOVT, PATIENTNEXTOFKIN, NEXTOFKINADDRESS, NEXTOFKINPHONENUMBER, PATIENTPHOTO, PATIENTFINGERPRINT, Original_ID, Original_FOLDERID, Original_FIRSTNAME, Original_MIDDLENAME, Original_SURNAME, Original_SEX, Original_BLOODGROUP, Original_GENOTYPE, Original_ADDRESS, Original_PHONENUMBER, Original_LOCALGOVT, Original_PATIENTNEXTOFKIN, Original_NEXTOFKINADDRESS, Original_NEXTOFKINPHONENUMBER, Original_ID);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private PATIENT_DATATABLETableAdapter _pATIENT_DATATABLETableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public PATIENT_DATATABLETableAdapter PATIENT_DATATABLETableAdapter {
            get {
                return this._pATIENT_DATATABLETableAdapter;
            }
            set {
                this._pATIENT_DATATABLETableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._pATIENT_DATATABLETableAdapter != null) 
                            && (this._pATIENT_DATATABLETableAdapter.Connection != null))) {
                    return this._pATIENT_DATATABLETableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._pATIENT_DATATABLETableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(EBHISDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pATIENT_DATATABLETableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.PATIENT_DATATABLE.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._pATIENT_DATATABLETableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(EBHISDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._pATIENT_DATATABLETableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.PATIENT_DATATABLE.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._pATIENT_DATATABLETableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(EBHISDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._pATIENT_DATATABLETableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.PATIENT_DATATABLE.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._pATIENT_DATATABLETableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(EBHISDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._pATIENT_DATATABLETableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._pATIENT_DATATABLETableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._pATIENT_DATATABLETableAdapter != null)) {
                    revertConnections.Add(this._pATIENT_DATATABLETableAdapter, this._pATIENT_DATATABLETableAdapter.Connection);
                    this._pATIENT_DATATABLETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._pATIENT_DATATABLETableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._pATIENT_DATATABLETableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._pATIENT_DATATABLETableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._pATIENT_DATATABLETableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._pATIENT_DATATABLETableAdapter != null)) {
                    this._pATIENT_DATATABLETableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._pATIENT_DATATABLETableAdapter]));
                    this._pATIENT_DATATABLETableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591